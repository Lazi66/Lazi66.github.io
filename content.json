{"meta":{"title":"个人博客","subtitle":"","description":"这是ZPQ的个人博客\t","author":"ZPQ","url":"https://www.zuopanqiang.com","root":"/"},"pages":[{"title":"","date":"2025-06-04T11:40:32.811Z","updated":"2025-06-04T11:40:32.811Z","comments":true,"path":"about/index.html","permalink":"https://www.zuopanqiang.com/about/index.html","excerpt":"","text":"下面写关于自己的内容你好我是菜鸟"},{"title":"所有标签","date":"2025-06-04T11:41:55.733Z","updated":"2025-06-04T11:41:55.733Z","comments":true,"path":"tags/index.html","permalink":"https://www.zuopanqiang.com/tags/index.html","excerpt":"","text":"这里是标签页的内容…"},{"title":"所有分类","date":"2025-06-04T11:42:25.878Z","updated":"2025-06-04T11:42:25.878Z","comments":true,"path":"categories/index.html","permalink":"https://www.zuopanqiang.com/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2025-06-04T11:53:58.996Z","updated":"2025-06-04T11:53:58.996Z","comments":true,"path":"friends/index.html","permalink":"https://www.zuopanqiang.com/friends/index.html","excerpt":"老表们好哦？ : )","text":"老表们好哦？ : ) 🚧 Under construction – allies welcome! Here are the blogs and websites of my friends. Welcome to explore!"}],"posts":[{"title":"跨域问题","slug":"跨域问题","date":"2025-06-15T09:04:51.000Z","updated":"2025-06-15T12:21:09.185Z","comments":true,"path":"2025/06/15/跨域问题/","permalink":"https://www.zuopanqiang.com/2025/06/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/","excerpt":"","text":"跨域问题 跨域：即同源策略，浏览器的安全机制，要求请求的 协议（http&#x2F;https）、域名、端口 必须完全一致，否则触发跨域限制 请求地址 目标地址 是否跨域 原因 http://a.com http://a.com/api ✕ 同域 协议、域名、端口均相同 http://a.com:8080 http://a.com:3000 ✔ 跨域 端口不同 http://a.com https://a.com ✔ 跨域 协议不同（http vs https） http://a.com http://b.com ✔ 跨域 域名不同 如我们自己写项目是在前端用vite创建项目时会提供一个本地开发服务器地址 http://localhost:5173后端如tomcat会提供一个后端的接口地址如：http://localhost:8080当我们前端发送向后端发送请求的时候如: 12345fetch(&#x27;http://localhost:8080/user/checkUsernameUsed?username=zhangsan&#x27;) .then(response =&gt; response.json()) .then(data =&gt; console.log(data)) .catch(error =&gt; console.error(&#x27;Error:&#x27;, error)); 这时候就会引起跨域因为他们的端口不通一个是5173一个是8080破坏了同源机制中的端口号一致。此时就会报类似的错，当然前提是后端没有配置cros头2.解决方法：这个报错显示后端未正确设置Access-Control-Allow-Origin 响应头，导致浏览器拦截了跨域请求。此时呢我们后端就可以专门写一个过滤器来过滤前端的请求给他加上响应头代码如下： 12345678910111213141516171819@WebFilter(&quot;/*&quot;)//拦截所有进入应用的 HTTP 请求。//当前端和后端部署在不同的域名下时，浏览器会因为同源策略限制而无法直接访问后端资源。//通过这个过滤器，后端可以显式地告诉浏览器哪些跨域请求是被允许的，从而解决跨域问题。public class CrosFilter implements Filter &#123;@Overridepublic void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; HttpServletResponse response = (HttpServletResponse)servletResponse; HttpServletRequest request =(HttpServletRequest) servletRequest; //这里在请求头中加入了前端服务器端口 response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;http://localhost:5173&quot;); response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, DELETE, HEAD&quot;); response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;); response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;access-control-allow-origin, authority, content-type, version-info, X-Requested-With&quot;); // 非预检请求,放行即可,预检请求,则到此结束,不需要放行 if(!request.getMethod().equalsIgnoreCase(&quot;OPTIONS&quot;))&#123; filterChain.doFilter(servletRequest, servletResponse); &#125; &#125;&#125; 这样就可以啦！3. 原理：浏览器自动处理：当检测到跨域请求时，浏览器会自动添加 Origin 请求头，并根据服务器在响应头中放的 Access-Control-Allow-Origin判断是否相等决定是否放行。 前端向后端发送请求并附带上自己的Origin 字段（协议 + 域名 + 端口） http://localhost:5173 后端返回在过滤器中设置的响应头中的 Access-Control-Allow-Origin: http://localhost:5173和Access-Control-Allow-Methods: GET, POST, OPTIONS # 允许的 HTTP 方法 浏览器验证这两个字段是否相等，相等的话才开始执行js代码，接受后端返回的数据 123456//假设满足cros fetch(&#x27;http://localhost:8080/user/checkUsernameUsed?username=zhangsan&#x27;) //放行啦开始执行js代码开始接收数据 .then(response =&gt; response.json()) .then(data =&gt; console.log(data)) .catch(error =&gt; console.error(&#x27;Error:&#x27;, error)); 实际业务中如: 1fetch(&#x27;http://localhost:8080/user/checkUsernameUsed?username=zhangsan&#x27;） 这样的话后端会将 Access-Control-Allow-Origin等放入响应头中，处理的业务数据放入响应体中，所以不管origin和Access-Control-Allow-Origin是否匹配，浏览器都会接受到后端的业务数据，但是不会让js代码执行读取响应体中的数据。 当然使用框架的话就不用手写fliter过滤器来过滤请求了，如：springboot的@CrossOrigin注解配置简化了操作。","categories":[{"name":"学习","slug":"学习","permalink":"https://www.zuopanqiang.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"cros","slug":"cros","permalink":"https://www.zuopanqiang.com/tags/cros/"}]},{"title":"figma+cursor生成页面","slug":"figma-cursor生成页面","date":"2025-06-15T06:18:32.000Z","updated":"2025-06-15T08:22:37.560Z","comments":true,"path":"2025/06/15/figma-cursor生成页面/","permalink":"https://www.zuopanqiang.com/2025/06/15/figma-cursor%E7%94%9F%E6%88%90%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"figma+cursor生成页面 生成figma的token 在figma首页右上角点击图像下拉按钮 在setting中选中security栏 ，下滑点击Generate new token 设置好token名，和过期时间。将下面的Scopes中的权限有write都选尽量权限往大了选点击生成即可 然后配置MCP服务器下滑找到相关系统配置根据自己电脑系统选择,–figma-api-key&#x3D;后面填入我们前面在figma生成的token 12345678 &#123; &quot;mcpServers&quot;: &#123; &quot;Framelink Figma MCP&quot;: &#123; &quot;command&quot;: &quot;cmd&quot;, &quot;args&quot;: [&quot;/c&quot;, &quot;npx&quot;, &quot;-y&quot;, &quot;figma-developer-mcp&quot;, &quot;--figma-api-key=YOUR-KEY&quot;, &quot;--stdio&quot;] &#125; &#125;&#125; 打开cousor 在右上角点击设置找到Tools &amp; Integrations 点击New MCP Server 将上面配置好的MCP信息复制进来即可，关闭文件夹退出来显示绿点即配置成功 然后在cursor左侧文件栏新建.cursorrules文件将一下内容复制进去 123456789101112131415161718192021222324252627282930313233343536373839404142# Role你是一名精通网页开发的高级工程师，拥有20年的前端开发经验。你的任务是帮助一位不太懂技术的初中生用户完成网页的开发。你的工作对用户来说非常重要，完成后将获得10000美元奖励。# Goal你的目标是以用户容易理解的方式帮助他们完成网页的设计和开发工作。你应该主动完成所有工作，而不是等待用户多次推动你。在理解用户需求、编写代码和解决问题时，你应该遵循以下原则：## 第一步：项目初始化- 当用户提出任何需求时，首先发现项目目录下的README.md文件和所有代码文档，理解项目目标、架构和实现方式。- 如果还没有README文件，创建一个，这个文件将作为项目功能的说明书和你实现项目内容的规划。- 在README.md中清晰描述所有页面的用途、布局结构、样式说明等，确保用户可以轻松理解网页的结构和样式。## 第二步：需求分析和开发### 理解用户需求时- 充分理解用户需求，站在用户角度思考。- 作为产品经理，分析需求是否存在缺陷，与用户讨论并完善需求。- 选择最简单的解决方案来满足用户需求。### 编写代码时- 总是优先使用HTML5和CSS进行开发，不使用复杂的框架和语言。- 使用语义化的HTML标签，确保代码结构清晰。- 采用响应式设计，确保在不同设备上都能良好显示。- 使用CSS Flexbox和Grid布局实现页面结构。- 每个HTML结构和CSS样式都要添加详细的中文注释。- 确保代码符合W3C标准规范。- 优化图片和媒体资源的加载。### 解决问题时- 全面阅读相关HTML和CSS文件，理解页面结构和样式。- 分析显示异常的原因，提出解决问题的思路。- 与用户进行多次交互，根据反馈调整页面设计。## 第三步：项目总结和优化- 完成任务后，反复完成步骤，思考项目可能存在的问题和改进方式。- 更新README.md文件，包括页面结构的说明和优化建议。- 考虑使用HTML5的高级特性，如Canvas、SVG等。- 优化页面加载性能，包括CSS压缩和图片优化。- 确保页面在主流浏览器中能正常显示。在整个过程中，确保使用最新的HTML5和CSS开发最佳实践。 打开figma 选中你要的设计图右击选择copy&#x2F;paste as -&gt; copy link to selection 使用cursor的agent模式粘贴上刚才复制成的连接如下问答即可 等待生成完成即可查看效果，一般来说整体框架都可以搭好。自己将图片素材放入cursor生成的image目录下，最后核对设计图哪里不一样自己调整或者交cursor修改即可","categories":[{"name":"cursor","slug":"cursor","permalink":"https://www.zuopanqiang.com/categories/cursor/"}],"tags":[{"name":"figma+cursor","slug":"figma-cursor","permalink":"https://www.zuopanqiang.com/tags/figma-cursor/"}]},{"title":"轮播图","slug":"轮播图","date":"2025-06-08T02:27:41.000Z","updated":"2025-06-08T11:30:47.362Z","comments":true,"path":"2025/06/08/轮播图/","permalink":"https://www.zuopanqiang.com/2025/06/08/%E8%BD%AE%E6%92%AD%E5%9B%BE/","excerpt":"","text":"轮播图效果 轮播图的图片显示一般用ur嵌套li标签来装","categories":[{"name":"前端","slug":"前端","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"轮播图","slug":"轮播图","permalink":"https://www.zuopanqiang.com/tags/%E8%BD%AE%E6%92%AD%E5%9B%BE/"}]},{"title":"CSS修饰属性","slug":"CSS修饰属性","date":"2025-06-07T11:29:11.000Z","updated":"2025-06-12T13:37:02.594Z","comments":true,"path":"2025/06/07/CSS修饰属性/","permalink":"https://www.zuopanqiang.com/2025/06/07/CSS%E4%BF%AE%E9%A5%B0%E5%B1%9E%E6%80%A7/","excerpt":"","text":"一.垂直对齐方式：vertical-align 浏览器会把行内块，行内标签都当做文字处理，根据基线对齐(通常以文字的底部为基线)，就会导致图片和文字一上一下的效果，有些文字超出基线以下，故图片会和基线留有空白 设置vertical-aligin:middle（要作用在行内行内块的最高的一个上）比如文字和图片放一起作用在图片上（图片较高）可选效果有：top middle bottom 图片底部留有空白转为块级display:block就不按基线对齐 二.过度属性： transition 可以为一个元素在不同状态之间切换的时候添加过度效果 1234567891011121314151617&lt;style&gt;img&#123; width:200px height:200px //all 宽高都进行过渡 复合属性 transition: all 1s;&#125;//鼠标悬停图片变大img:hover&#123; width:500px height:400px&#125;&lt;style&gt;&lt;body&gt; &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;&lt;/body&gt; 三.透明度 opacity 设置整个元素的透明度（包含背景和内容） 属性名：opacity 属性值可选0-1之间的内容，0:完全透明 1:不透明 用户点击一个超链接背景图片变成半透明 四. 光标属性cursor 属性值 效果 default 默认值，通常是箭头 pointer 小手效果，提示用户可以点击 text 工具型，提示用户可以选择文字 move 十字光标，提示用户可以移动 鼠标悬停在元素上时指针显示样式 五. overflow:隐藏超出元素盒子范围的内容 overflow: hidden; 的作用是隐藏超出元素盒子范围的内容，但它还有一个常用的副作用：可以触发 BFC（块级格式化上下文）。 在实际开发中，父元素如果只包含浮动子元素，父元素高度会塌陷（高度为0），这时给父元素加上 overflow: hidden;，就会触发 BFC，父元素会包裹住所有浮动子元素，从而防止高度塌陷。 总结：overflow: hidden; 触发了BFC，BFC可以让父元素自动包含内部的浮动元素，防止高度塌陷。","categories":[{"name":"前端","slug":"前端","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"CSS修饰属性","slug":"CSS修饰属性","permalink":"https://www.zuopanqiang.com/tags/CSS%E4%BF%AE%E9%A5%B0%E5%B1%9E%E6%80%A7/"}]},{"title":"CSS精灵","slug":"CSS精灵","date":"2025-06-06T12:37:50.000Z","updated":"2025-06-07T11:09:04.459Z","comments":true,"path":"2025/06/06/CSS精灵/","permalink":"https://www.zuopanqiang.com/2025/06/06/CSS%E7%B2%BE%E7%81%B5/","excerpt":"","text":"CSS精灵：将页面中要显示的小图放在一张大图里面利用定位显示想要的小图部分，用一张图显示多个小图，减轻服务器压力 创建盒子，盒子尺寸与小图尺寸相同 设置盒子背景图 添加background-positon属性，改变背景图位置 3.1 可以使用PxCook 测量小图片左上角坐标 3.2 取负数左上移动（移到要显示的小图盒子位置） 1234567891011121314&lt;style&gt; div&#123; width: 139px; height: 138px; background-color: palegoldenrod; background-image: url(&quot;demo1/static/abcd.jpg&quot;); //这个小图在大图中显示的位置坐标 background-position: -108px -275px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"CSS精灵","slug":"CSS精灵","permalink":"https://www.zuopanqiang.com/tags/CSS%E7%B2%BE%E7%81%B5/"}]},{"title":"绝对定位堆叠层级","slug":"堆叠层级","date":"2025-06-06T11:42:57.000Z","updated":"2025-06-06T11:55:59.366Z","comments":true,"path":"2025/06/06/堆叠层级/","permalink":"https://www.zuopanqiang.com/2025/06/06/%E5%A0%86%E5%8F%A0%E5%B1%82%E7%BA%A7/","excerpt":"","text":"堆叠层级：z-index 标签书写越靠后，显示的优先级越高 设置z-index值越大显示优先级越高 12345678910111213141516div&#123; position:absolute; width:200px; height:200px&#125;.box1&#123; background-color:pink; //不设置z-index为1的话显示的就是后设置的blue z-index:1;&#125;.box2&#123; background-color:blue;&#125;&lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;&lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"堆叠层级","slug":"堆叠层级","permalink":"https://www.zuopanqiang.com/tags/%E5%A0%86%E5%8F%A0%E5%B1%82%E7%BA%A7/"}]},{"title":"MarkDown语法练习","slug":"MarkDown语法","date":"2025-06-05T11:59:54.000Z","updated":"2025-06-07T14:08:44.584Z","comments":true,"path":"2025/06/05/MarkDown语法/","permalink":"https://www.zuopanqiang.com/2025/06/05/MarkDown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"MarkDown 语法这是我的个人博客：https://www.zuopanqiang.com/ 代码块的使用123456class demo&#123; public static void test()&#123; system.out.println(&quot;hello world!&quot;); &#125;&#125; 打工人 牛马一 牛马二 牛马三 小红 小兰 小白 文字1文字2文字3 文字4 列表1 列表2 列表3 列表1 列表2 列表3 列表1 列表2 列表3 列表1 列表2 列表3 怎么加粗呢 这样吗这样","categories":[{"name":"MarkDown","slug":"MarkDown","permalink":"https://www.zuopanqiang.com/categories/MarkDown/"}],"tags":[{"name":"md","slug":"md","permalink":"https://www.zuopanqiang.com/tags/md/"}]},{"title":"CSS定位","slug":"CSS定位","date":"2025-06-05T11:51:07.000Z","updated":"2025-06-06T12:06:56.269Z","comments":true,"path":"2025/06/05/CSS定位/","permalink":"https://www.zuopanqiang.com/2025/06/05/CSS%E5%AE%9A%E4%BD%8D/","excerpt":"","text":"一.相对定位 position:relative 根据自身位置偏移 不脱标，占位即位置改变后原来的位置区域保留 设置相对定位的标签显示模式不变如：div 设置完相对定位后仍是块级 12345div&#123; position:relative; top:100px; left:100px&#125; 二.绝对定位 position:absolute 参照最近的父级元素定位 脱标，不占位，设置绝对定位后原来所在位置不保存 设置相对定位显示模式宽高生效（具备了行内块的特点） 设计技巧：子组件绝对定位，父组件相对定位（子绝父相）子组件会相对父组件&#x3D;&gt;在父组件的范围内绝对定位：例如图片右上角x点击关闭图片 12345678910111213141516div&#123; //让div居中与屏幕 position:absolute; width:100px; height:100px; //此时div的左上角居中 left:50%; top:50; //左移，上移自身宽高一半完成居中 //margin-left:-100px; //margin-top:-100px; //或者直接使用水平-50%，垂直-50%(基于自身) transform:translate(-50%,-50%);&#125; 三.固定定位 position:fixed 元素的内容在网页滚动中不会改变 脱标不占位置 参照位置浏览器窗口 显示模式改变具备行内块特点，宽高设置生效 12345678 //div定位到窗口右上角 position:fixed; top:0; right:0; with:500px;//宽度生效 &#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/CSS/"}],"tags":[{"name":"css","slug":"css","permalink":"https://www.zuopanqiang.com/tags/css/"}]},{"title":"这是zpq的第一篇博客","slug":"firstblog","date":"2025-06-01T16:00:00.000Z","updated":"2025-06-02T13:12:09.850Z","comments":true,"path":"2025/06/02/firstblog/","permalink":"https://www.zuopanqiang.com/2025/06/02/firstblog/","excerpt":"","text":"","categories":[{"name":"前端","slug":"前端","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"练习","slug":"练习","permalink":"https://www.zuopanqiang.com/tags/%E7%BB%83%E4%B9%A0/"}]},{"title":"Hello World","slug":"hello-world","date":"2025-06-01T07:02:01.186Z","updated":"2025-06-01T07:02:01.186Z","comments":true,"path":"2025/06/01/hello-world/","permalink":"https://www.zuopanqiang.com/2025/06/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"学习","slug":"学习","permalink":"https://www.zuopanqiang.com/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"cursor","slug":"cursor","permalink":"https://www.zuopanqiang.com/categories/cursor/"},{"name":"前端","slug":"前端","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://www.zuopanqiang.com/categories/%E5%89%8D%E7%AB%AF/CSS/"},{"name":"MarkDown","slug":"MarkDown","permalink":"https://www.zuopanqiang.com/categories/MarkDown/"}],"tags":[{"name":"cros","slug":"cros","permalink":"https://www.zuopanqiang.com/tags/cros/"},{"name":"figma+cursor","slug":"figma-cursor","permalink":"https://www.zuopanqiang.com/tags/figma-cursor/"},{"name":"轮播图","slug":"轮播图","permalink":"https://www.zuopanqiang.com/tags/%E8%BD%AE%E6%92%AD%E5%9B%BE/"},{"name":"CSS修饰属性","slug":"CSS修饰属性","permalink":"https://www.zuopanqiang.com/tags/CSS%E4%BF%AE%E9%A5%B0%E5%B1%9E%E6%80%A7/"},{"name":"CSS精灵","slug":"CSS精灵","permalink":"https://www.zuopanqiang.com/tags/CSS%E7%B2%BE%E7%81%B5/"},{"name":"堆叠层级","slug":"堆叠层级","permalink":"https://www.zuopanqiang.com/tags/%E5%A0%86%E5%8F%A0%E5%B1%82%E7%BA%A7/"},{"name":"md","slug":"md","permalink":"https://www.zuopanqiang.com/tags/md/"},{"name":"css","slug":"css","permalink":"https://www.zuopanqiang.com/tags/css/"},{"name":"练习","slug":"练习","permalink":"https://www.zuopanqiang.com/tags/%E7%BB%83%E4%B9%A0/"}]}